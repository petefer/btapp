@page "/page"
@page "/page/{number:int}"
@inject HttpClient Http
@using System.Globalization
@using System.Text
@using System.Text.RegularExpressions
@using System.Xml

<div>
@if (currentPage > firstPage && currentPage < 78)
{
    <button class="btn btn-primary" onclick="@DecrementCount">Previous</button>
}
    &nbsp;&nbsp;Page: @currentPage &nbsp;&nbsp;
@if (currentPage < lastPage)
{
    <button class="btn btn-primary" onclick="@IncrementCount">Next</button>
}
&nbsp;&nbsp;
@if (currentPage > 18 && currentPage < 121)
{
    <button class="btn btn-secondary" onclick="@TogglePS">@((PCon ? "Original" : "Paraphrase"))</button>
}
<!--
    <input type="checkbox" value="@PCon" onchange="@TogglePS"/><span>Paraphrase @PCon</span>

    &nbsp;&nbsp;Go to page:<input type="number" bind="userPage" onkeyup="@GoToPage"/>
    -->
</div>
<hr />
<div>
@((MarkupString)pageContent)
</div>
<hr />
<br />
@if (currentPage < lastPage)
{
    <button class="btn btn-primary" onclick="@IncrementCount">Next</button>
}

<!--
<p>new words @newwords.Count()</p>
<ul>
    @foreach (var item in newwords)
    {
        <li>@item</li>
    }
</ul>
<p>gloswordsfound @gloswordsfound.Count()</p>
<ul>
    @foreach (var item2 in gloswordsfound)
    {
        <li>@item2</li>
    }
</ul>

<p>Log</p>
<p>@Log</p>
-->

@code {
    [Parameter]
    int number { get; set; } = 21;
    int currentPage = 21;
    int firstPage = 19;
    int lastPage = 121;
    string userPage { get; set; }
    string pageContent = "...working...";
    string book = "BeingandTimeMR";
    string[] words = { "undefined" };
    string[] gloswordsfound = { "undefined" };
    string[] newwords = { "undefined" };
    string Log = "";
    Dictionary<string, string> glossary = new Dictionary<string, string>(128);
    bool PCloaded = false;
    bool PCon { get; set; } = false;

    protected override async Task OnInitAsync()
    {
        await GetGlossaryWords();
        if (number != 5)
        {
            currentPage = number;
        }
        await GetPage();
    }

    async void GoToPage()
    {
        Log += $"in GoToPage userPage is {userPage}";
        int p = Int32.Parse(userPage);
        if (p > lastPage || p < firstPage)
        {
            return;
        }

        pageContent = "...working...";
        this.StateHasChanged();
        currentPage = p;
        Log += $"in GoToPage currentPage is {currentPage}";
        await GetPage();
        this.StateHasChanged();
    }

    async void DecrementCount()
    {
        Log = "";
        if (currentPage == lastPage)
        {
            return;
        }
        if (currentPage > firstPage)
        {
            pageContent = "...working...";
            this.StateHasChanged();
            currentPage--;
            await GetPage();
            this.StateHasChanged();
        }
    }

    async void IncrementCount()
    {
        Log = "";
        if (currentPage == lastPage)
        {
            return;
        }
        if (currentPage < lastPage)
        {
            pageContent = "...working...";
            this.StateHasChanged();
            currentPage++;
            await GetPage();
            this.StateHasChanged();
        }
    }

    async Task GetPage()
    {
        PCloaded = PCon = false;
        //Log = "";
        pageContent += "fetching content from beyng.com...";
        this.StateHasChanged();

        string url = @"/pages/en/" +  book + "/" + book + "." + String.Format("{0:D3}", currentPage) + ".html";
        string p = await Http.GetStringAsync(url);
        
        pageContent += "processing content...";
        this.StateHasChanged();

        p = GetHtmlBody(p);
        if (!p.Contains("svg"))
        {
            p = TagGreek(p);
        }
        pageContent = p;
    }
    
    async void TogglePS()
    {
        Log += $"in TogglePS PCloaded is {PCloaded}.";
        this.StateHasChanged();

        var xdoc = new XmlDocument();
        xdoc.LoadXml("<root xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns=\"\">" + pageContent + "</root>");
        XmlNodeList nodes = xdoc.SelectNodes("//p");
        Log += $"nodes is {nodes}.";
        this.StateHasChanged();
        Log += $"nodes count is {nodes.Count}.";
        this.StateHasChanged();
        List<string> ids = new List<string>(5);
        foreach (XmlNode node in nodes) 
        {
            string id = node.Attributes?["id"]?.InnerText ?? "";
            if (id.Length > 0)
            {
                ids.Add(id);
            }
        }
        Log += $"ids count is {ids.Count}.";
        this.StateHasChanged();
        if (!PCloaded)
        {
            foreach (var id in ids)
            {
                var node = xdoc.SelectSingleNode($"//p[@id='{id}']");
                if (!id.StartsWith("FN"))
                {
                    var pc = await FetchPC(xdoc, id);
                    XmlDocumentFragment xfrag = xdoc.CreateDocumentFragment();
                    xfrag.InnerXml = pc;
                    node.AppendChild(xfrag);
                    ((XmlElement)node).SetAttribute("style","display:none");
                }
                else
                {
                    ((XmlElement)node).SetAttribute("style","display:none;font-size:small");
                }
            }
            PCon = true; 
            PCloaded = true;
        }
        else
        {
            PCon = !PCon;    
            foreach (var id in ids)
            {
                var node = xdoc.SelectSingleNode($"//p[@id='{id}']");
                
                if (id.StartsWith("PC_"))
                {
                    ((XmlElement)node).SetAttribute("style", PCon ? "display:block" : "display:none");
                }
                else
                {
                    if (id.StartsWith("FN"))
                    {
                        ((XmlElement)node).SetAttribute("style", PCon ? "display:none;font-size:small" : "display:block;font-size:small");
                    }
                    else
                    {
                        ((XmlElement)node).SetAttribute("style", PCon ? "display:none" : "display:block");
                    }
                }
            }
        }
        Log += $"PCloaded is {PCloaded}.";
        Log += $"PCon is {PCon}.";
        pageContent = xdoc.InnerXml;
        this.StateHasChanged();
    }

    async Task<string> FetchPC(XmlDocument xdoc, string id)
    {
        string url = @"/btapp/pages/PC_" +  id + ".xml";
        string pc = await Http.GetStringAsync(url);
        Log += $"in FetchPC({id}) pc is {pc}.";
        this.StateHasChanged();
        return pc;
    }

    string GetHtmlBody(string html)
    {
        RegexOptions options = RegexOptions.IgnoreCase | RegexOptions.Singleline;
        Regex regx = new Regex( "<body>(?<theBody>.*)</body>", options );

        Match match = regx.Match( html );

        if ( match.Success ) {
            return match.Groups["theBody"].Value;
        } else
        {
            return "Body not found in HTML.";
        }
    }

    async Task GetGlossaryWords()
    {
        pageContent += "fetching Greek glossary from beyng.com...";

        string url = @"pages/glossarywords.txt";
        string glossaryWords = await Http.GetStringAsync(url);
        foreach (string line in glossaryWords.Split(new string[] { Environment.NewLine }, StringSplitOptions.RemoveEmptyEntries))
        {
            string[] ts = line.Split(':');
            // Log += $"Adding gloss {ts[0]} : {ts[1]}-";
            glossary.Add(ts[0], ts[1].TrimEnd());
        }
    }

    string TagGreek(string s)
    {
        // Log += "in TagGreek-";
        GetGreekWords(s);
        foreach (string word in gloswordsfound)
        {
            string eng = glossary[word];
            // Log += $"gloslinking {word} to {eng}-";
            string taggedword = $"<span title=\"{eng}\">{word}</span>";
            s = s.Replace(word, taggedword);

            CultureInfo ci = new CultureInfo("el-GR");
            string uWord = ci.TextInfo.ToTitleCase(word);
            if (words.Contains(uWord))
            {
                // Log += $"gloslinking {uWord} to {eng}-";
                taggedword = $"<span title=\"{eng}\">{uWord}</span>";
                s = s.Replace(uWord, taggedword);
            }
        }
        return s;
    }

    string ReplaceFirst(string text, string search, string replace)
    {
        int pos = text.IndexOf(search, StringComparison.Ordinal);
        if (pos < 0)
        {
            return text;
        }
        return text.Substring(0, pos) + replace + text.Substring(pos + search.Length);
    }

    void GetGreekWords(string s)
    {
        Regex reg = new Regex(@"\W+");
        string[] warr = reg.Split(s);
        List<string> greekwords = new List<string>();
        List<string> gloswords = new List<string>();
        foreach (string w in warr)
        {
            if (w.Length < 3)
            {
                continue;
            }
            if (Encoding.UTF8.GetByteCount(w) != w.Length)
            {
                string lw = w.ToLower();
                if (glossary.Keys.Contains(lw))
                {
                    if (!gloswords.Contains(lw))
                    {
                        gloswords.Add(lw);
                    }
                }
                if (!greekwords.Contains(w))
                {
                    greekwords.Add(w);
                }
            }
            GreekComparer gc = new GreekComparer();
            gloswords.Sort(gc);
            gloswordsfound = gloswords.ToArray();
            greekwords.Sort(gc);
            words = greekwords.ToArray();
            newwords = greekwords.Except(gloswords).ToArray();
        }
    }

    // https://social.msdn.microsoft.com/Forums/en-US/df716912-d825-4a6e-8f86-536fd982137b/stringcompare-with-unicode-characters
    class GreekComparer : IComparer<String>
    {
        public int Compare(string s1, string s2)
        {
            return String.Compare(s1.Normalize(System.Text.NormalizationForm.FormD), s2.Normalize(System.Text.NormalizationForm.FormD), StringComparison.InvariantCultureIgnoreCase);
        }
    }
}
